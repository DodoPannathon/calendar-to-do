"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Monitor = exports.BROWSER_WINDOW_ASSETS_PATH = exports.BROWSER_WINDOW_PRELOAD_PATH = void 0;
const url_1 = __importDefault(require("url"));
const lodash_1 = require("lodash");
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const events_1 = require("events");
const electron_1 = require("electron");
const ps_1 = require("./ps");
const constants_1 = require("../../common/constants");
__exportStar(require("./reporter"), exports);
__exportStar(require("../../common/constants"), exports);
exports.BROWSER_WINDOW_PRELOAD_PATH = path_1.default.resolve(__dirname, 'preload.js');
exports.BROWSER_WINDOW_ASSETS_PATH = url_1.default.format({
    pathname: path_1.default.resolve(__dirname, '..', '..', '..', 'dist', 'index.html'),
    protocol: 'file:',
});
class Monitor extends events_1.EventEmitter {
    constructor(options = {}) {
        super();
        this.options = {
            threshold: 5e3,
            dumpDir: null,
            dumpThreshold: 10e3,
            ...options,
        };
    }
    stop() {
        if (this._timer) {
            clearInterval(this._timer);
        }
    }
    start() {
        this.stop();
        this._timer = setInterval(() => this.refreshData(), this.options.threshold);
        // 前端页面更快的更新到数据
        this.refreshData();
    }
    /**
     * 发送新的数据到前端
     */
    async refreshData() {
        const data = await this.getAppMetricsAndProcess();
        this.dump(data);
        this.emit(constants_1.EVENT_DATA_CHANNEL_NAME, data);
    }
    async dump(data) {
        const { dumpDir, dumpThreshold } = this.options;
        if (!dumpDir)
            return;
        const now = Date.now();
        if (this._latestDumpTimeStamp && dumpThreshold && now - this._latestDumpTimeStamp < dumpThreshold) {
            return;
        }
        this._latestDumpTimeStamp = now;
        const fileName = path_1.default.join(dumpDir, `${now}.json`);
        await fs_1.promises.writeFile(fileName, JSON.stringify(data), 'utf8');
    }
    setOptions(options = {}) {
        this.options = Object.assign(this.options, options);
        if (this.options.dumpDir) {
            this.start();
        }
    }
    async getAppMetrics() {
        const allWebContents = electron_1.webContents.getAllWebContents();
        const webContentInfos = allWebContents.map((webContentInfo) => {
            return {
                type: webContentInfo.getType(),
                id: webContentInfo.id,
                pid: webContentInfo.getOSProcessId(),
                url: webContentInfo.getURL(),
            };
        });
        return electron_1.app.getAppMetrics().map((appMetric) => {
            const webContentInfo = webContentInfos.find((webContentInfo) => webContentInfo.pid === appMetric.pid);
            return {
                ...appMetric,
                webContentInfo,
            };
        });
    }
    async getAppMetricsAndProcess() {
        const rootPid = process.pid;
        const processMap = await (0, ps_1.listProcesses)(rootPid);
        const appMetrics = await this.getAppMetrics();
        return appMetrics.map((appMetric) => {
            const processDetail = (0, lodash_1.pick)(processMap.get(appMetric.pid), ['cmd']);
            return {
                ...appMetric,
                ...processDetail,
            };
        });
    }
    bindEventToWindow(win) {
        if (!win || !win.webContents)
            return;
        win.webContents.on('ipc-message', (_, eventName, ...args) => {
            if (eventName === constants_1.EVENT_ACTION_CHANNEL_NAME) {
                const action = args[0];
                const params = args[1];
                if (action === 'openDevTools') {
                    const webContent = electron_1.webContents.fromId(params.id);
                    if (webContent) {
                        webContent.openDevTools();
                    }
                }
                else if (action === 'killProcess') {
                    process.kill(params.pid);
                }
                else if (action === 'openExternal') {
                    electron_1.shell.openExternal(params);
                }
            }
        });
    }
}
exports.Monitor = Monitor;
//# sourceMappingURL=index.js.map