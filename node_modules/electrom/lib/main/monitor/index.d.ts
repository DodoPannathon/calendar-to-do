/// <reference types="node" />
import { EventEmitter } from 'events';
import { BrowserWindow } from 'electron';
import { ProcessInfo } from '../../common/interface';
export * from './reporter';
export * from '../../common/constants';
export declare const BROWSER_WINDOW_PRELOAD_PATH: string;
export declare const BROWSER_WINDOW_ASSETS_PATH: string;
interface MonitorOptions {
    threshold?: number;
    dumpDir?: string | null;
    dumpThreshold?: number;
}
export declare class Monitor extends EventEmitter {
    options: MonitorOptions;
    _timer?: ReturnType<typeof setTimeout>;
    _latestDumpTimeStamp?: number;
    constructor(options?: MonitorOptions);
    stop(): void;
    start(): void;
    /**
     * 发送新的数据到前端
     */
    refreshData(): Promise<void>;
    dump(data: ProcessInfo[]): Promise<void>;
    setOptions(options?: {}): void;
    getAppMetrics(): Promise<{
        webContentInfo: {
            type: "webview" | "backgroundPage" | "window" | "browserView" | "remote" | "offscreen";
            id: number;
            pid: number;
            url: string;
        } | undefined;
        cpu: Electron.CPUUsage;
        creationTime: number;
        integrityLevel?: "high" | "low" | "untrusted" | "medium" | "unknown" | undefined;
        memory: Electron.MemoryInfo;
        name?: string | undefined;
        pid: number;
        sandboxed?: boolean | undefined;
        serviceName?: string | undefined;
        type: "Tab" | "Browser" | "Utility" | "Zygote" | "Sandbox helper" | "GPU" | "Pepper Plugin" | "Pepper Plugin Broker" | "Unknown";
    }[]>;
    getAppMetricsAndProcess(): Promise<{
        cmd?: string | undefined;
        pid: number;
        ppid?: number | undefined;
        load?: number | undefined;
        mem?: number | undefined;
        children?: import("./ps").ProcessItem[] | undefined;
        webContentInfo: {
            type: "webview" | "backgroundPage" | "window" | "browserView" | "remote" | "offscreen";
            id: number;
            pid: number;
            url: string;
        } | undefined;
        cpu: Electron.CPUUsage;
        creationTime: number;
        integrityLevel?: "high" | "low" | "untrusted" | "medium" | "unknown" | undefined;
        memory: Electron.MemoryInfo;
        name?: string | undefined;
        sandboxed?: boolean | undefined;
        serviceName?: string | undefined;
        type: "Tab" | "Browser" | "Utility" | "Zygote" | "Sandbox helper" | "GPU" | "Pepper Plugin" | "Pepper Plugin Broker" | "Unknown";
    }[]>;
    bindEventToWindow(win: BrowserWindow): void;
}
//# sourceMappingURL=index.d.ts.map