"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderHtmlReporter = exports.genTextReporter = exports.pickDataFromDir = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const moment_1 = __importDefault(require("moment"));
const lodash_1 = __importDefault(require("lodash"));
const filesize_1 = __importDefault(require("filesize"));
const templatePath = path_1.default.join(__dirname, 'reporter.template.html');
const template = fs_1.default.readFileSync(templatePath, 'utf8');
const TYPE_SORT_INDEX_MAP = {
    Browser: '0',
    Tab: '1',
    GPU: '2',
    Utility: '3',
    Nil: '4',
};
const calcAll = (array) => {
    const avg = lodash_1.default.mean(array);
    const min = lodash_1.default.min(array);
    const max = lodash_1.default.max(array);
    return {
        avg,
        min,
        max,
    };
};
const formatCPUUsage = (value) => `${lodash_1.default.round(value * 10, 2)}%`;
const formatMemory = (value) => (0, filesize_1.default)(value * 1024);
const pickDataFromDir = (dir) => {
    const res = [];
    fs_1.default.readdirSync(dir)
        .filter((file) => path_1.default.extname(file) === '.json')
        .forEach((file) => {
        const filePath = path_1.default.join(dir, file);
        res.push({
            key: path_1.default.basename(file, path_1.default.extname(file)),
            data: require(filePath),
        });
        delete require.cache[filePath];
    });
    return res;
};
exports.pickDataFromDir = pickDataFromDir;
const genSummary = (originData) => {
    const processDataMap = {};
    const pickCount = originData.length;
    originData.forEach((data) => {
        const formatTime = (0, moment_1.default)(parseInt(data.key, 10)).format('YYYY-MM-DD HH:mm:ss.SSS');
        data.formatTime = formatTime;
        data.data.forEach((item) => {
            const { pid, type, creationTime, memory, cpu } = item;
            const { percentCPUUsage } = cpu;
            const { workingSetSize, peakWorkingSetSize } = memory;
            processDataMap[pid] = processDataMap[pid] || {
                pid,
                creationTime,
                percentCPUUsage: [],
                memoryWorkingSetSize: [],
                memoryPeakWorkingSetSize: [],
                type: `${TYPE_SORT_INDEX_MAP[type] || TYPE_SORT_INDEX_MAP.Nil}_${type}`,
            };
            processDataMap[pid].percentCPUUsage.push(percentCPUUsage);
            processDataMap[pid].memoryWorkingSetSize.push(workingSetSize);
            processDataMap[pid].memoryPeakWorkingSetSize.push(peakWorkingSetSize);
        });
    });
    const processDataArray = lodash_1.default.sortBy(lodash_1.default.toArray(processDataMap), 'type');
    return {
        pickCount,
        processDataMap,
        processDataArray,
        originData,
    };
};
const genTextReporter = (originData) => {
    const data = genSummary(originData);
    const { pickCount, processDataArray } = data;
    const list = [];
    processDataArray.forEach((item) => {
        list.push(`pid: ${item.pid}(${item.type})`);
        const mem = calcAll(item.memoryWorkingSetSize);
        list.push(`mem: ${formatMemory(mem.avg || 0)}(avg) ${formatMemory(mem.max || 0)}(max) ${formatMemory(mem.min || 0)}(min)`);
        const cpu = calcAll(item.percentCPUUsage);
        list.push(`cpu: ${formatCPUUsage(cpu.avg || 0)}(avg) ${formatCPUUsage(cpu.max || 0)}(max) ${formatCPUUsage(cpu.min || 0)}(min)`);
    });
    const str = [`pick: ${pickCount}`, `${list.join('\n')}`].join('\n');
    return {
        pickCount,
        str,
        str_list: list,
        data,
    };
};
exports.genTextReporter = genTextReporter;
const renderHtmlReporter = (originData) => {
    const data = genSummary(originData);
    return template.replace(/\/\/\s+insert-global-data/g, `window.data = ${JSON.stringify(data)};`);
};
exports.renderHtmlReporter = renderHtmlReporter;
const Reporter = { genTextReporter: exports.genTextReporter, renderHtmlReporter: exports.renderHtmlReporter, pickDataFromDir: exports.pickDataFromDir };
exports.default = Reporter;
//# sourceMappingURL=reporter.js.map