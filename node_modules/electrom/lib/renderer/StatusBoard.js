"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusBoard = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const antd_1 = require("antd");
const filesize_1 = __importDefault(require("filesize"));
const lodash_1 = require("lodash");
const icons_1 = require("@ant-design/icons");
const BottomPanel_1 = require("./components/BottomPanel");
const constants_1 = require("../common/constants");
const StatusBoard_module_less_1 = __importDefault(require("./StatusBoard.module.less"));
const util_1 = require("./util");
// 测试共同字符串数量
const MAX_COMMON_STRING_TEST = 3;
const Footer = (props) => {
    return ((0, jsx_runtime_1.jsx)("footer", { children: (0, jsx_runtime_1.jsx)("a", { onClick: e => {
                e.preventDefault();
                props.ipcRenderer.send(props.eventActionChannelName, 'openExternal', 'https://github.com/electron-modules/electrom');
            }, children: "Electrom" }) }));
};
const useViewModel = (props) => {
    const { ipcRenderer } = props;
    const [data, setData] = (0, react_1.useState)([]);
    const [processBaseIndex, setProcessBaseIndex] = (0, react_1.useState)(-1);
    const [selectedProcess, setSelectedProcess] = (0, react_1.useState)();
    const openDevTools = (webContentInfo) => {
        ipcRenderer.send(props.eventActionChannelName, 'openDevTools', webContentInfo);
    };
    const killProcess = (item) => {
        ipcRenderer.send(props.eventActionChannelName, 'killProcess', item);
    };
    function getTotalMemorySize(_data, key) {
        // @ts-ignore
        const total = (0, lodash_1.sumBy)(_data, item => item.memory[key]);
        return (0, filesize_1.default)(total * 1024);
    }
    function getTotalCPU(_data) {
        const total = (0, lodash_1.sumBy)(_data, item => item.cpu.percentCPUUsage);
        return (0, lodash_1.round)(total * 10, 2);
    }
    const columns = [
        {
            title: 'Process',
            dataIndex: 'cmd',
            render: (cmd, item) => {
                const { webContentInfo } = item;
                if (!webContentInfo) {
                    return (0, jsx_runtime_1.jsx)("div", { children: (0, util_1.findName)(cmd, processBaseIndex) });
                }
                let display = [];
                try {
                    const urlObj = new URL(webContentInfo.url);
                    if (urlObj.hash) {
                        display.push(urlObj.hash);
                    }
                    if (urlObj.protocol) {
                        display.push((0, jsx_runtime_1.jsx)(antd_1.Tooltip, { placement: "bottom", title: webContentInfo.url, children: urlObj.protocol }));
                    }
                }
                catch (_) { }
                return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { children: (0, util_1.findName)(cmd, processBaseIndex) }), (0, jsx_runtime_1.jsxs)("span", { className: StatusBoard_module_less_1.default.desc, children: [(0, jsx_runtime_1.jsxs)("span", { children: ["id:", webContentInfo.id] }), (0, jsx_runtime_1.jsxs)("span", { children: ["type:", webContentInfo.type] }), display.map((item) => ((0, jsx_runtime_1.jsx)("span", { children: item })))] })] }));
            },
            fixed: 'right',
        },
        {
            title: 'Type',
            dataIndex: 'type',
            width: '80px',
            filters: Array.from(new Set(data.map((item) => item.type))).map((item) => {
                return {
                    text: item,
                    value: item,
                };
            }),
            defaultFilteredValue: [],
            onFilter: (value, record) => record.type === value,
            ellipsis: true,
            filterMultiple: false,
            fixed: 'right',
        },
        {
            title: ((0, jsx_runtime_1.jsxs)("div", { className: StatusBoard_module_less_1.default.columnTitle, children: ["CPU", (0, jsx_runtime_1.jsxs)("div", { className: StatusBoard_module_less_1.default.value, children: [getTotalCPU(data), "%"] })] })),
            dataIndex: 'cpu',
            sorter: (a, b) => a.cpu.percentCPUUsage - b.cpu.percentCPUUsage,
            render: (cpu) => (0, lodash_1.round)(cpu.percentCPUUsage * 10, 2),
            width: '80px',
            fixed: 'right',
        },
        {
            title: ((0, jsx_runtime_1.jsxs)("div", { className: StatusBoard_module_less_1.default.columnTitle, children: ["Working", (0, jsx_runtime_1.jsx)("div", { className: StatusBoard_module_less_1.default.value, children: getTotalMemorySize(data, 'workingSetSize') })] })),
            dataIndex: 'memory',
            sorter: (a, b) => a.memory.workingSetSize - b.memory.workingSetSize,
            render: (memory) => (0, filesize_1.default)(memory.workingSetSize * 1024),
            width: '100px',
            fixed: 'right',
        },
        {
            title: ((0, jsx_runtime_1.jsxs)("div", { className: StatusBoard_module_less_1.default.columnTitle, children: ["Peak", (0, jsx_runtime_1.jsx)("div", { className: StatusBoard_module_less_1.default.value, children: getTotalMemorySize(data, 'peakWorkingSetSize') })] })),
            dataIndex: 'memory',
            sorter: (a, b) => a.memory.peakWorkingSetSize - b.memory.peakWorkingSetSize,
            render: (memory) => (0, filesize_1.default)(memory.peakWorkingSetSize * 1024),
            width: '100px',
            fixed: 'right',
        },
        {
            title: 'PID',
            dataIndex: 'pid',
            width: '65px',
            fixed: 'right',
        },
        {
            title: 'Action',
            dataIndex: 'type',
            width: '60px',
            fixed: 'left',
            render: (type, item) => {
                const isDevtoolsSelf = !!item.webContentInfo?.url.startsWith('devtools://devtools');
                return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(icons_1.StopOutlined, { title: `kill PID: ${item.pid}`, onClick: () => killProcess(item) }), type === 'Tab' && !isDevtoolsSelf && ((0, jsx_runtime_1.jsx)(icons_1.BugOutlined, { title: "debug", onClick: (e) => {
                                e.stopPropagation();
                                openDevTools(item.webContentInfo);
                            }, style: { marginLeft: 8 } }))] }));
            },
        },
    ];
    const updateAppMetrics = (_, appMetrics) => {
        const list = Array.isArray(appMetrics) ? appMetrics : [];
        if (list.length > MAX_COMMON_STRING_TEST && !(0, util_1.isWindows)()) {
            setProcessBaseIndex((0, util_1.findCommonStringPlus)(list.map((item) => item.cmd)));
        }
        setData(list);
    };
    const onClickBlank = (e) => {
        if (e.target.nodeName === 'BODY') {
            setSelectedProcess(undefined);
        }
    };
    (0, react_1.useEffect)(() => {
        ipcRenderer.on(props.eventDataChannelName, updateAppMetrics);
        document.body.addEventListener('click', onClickBlank, false);
        return () => {
            ipcRenderer.removeListener(props.eventDataChannelName, updateAppMetrics);
            document.body.removeEventListener('click', onClickBlank);
        };
    }, [ipcRenderer, props.eventDataChannelName]);
    return {
        state: {
            columns,
            data,
            selectedProcess,
        },
        actions: {
            setSelectedProcess,
        },
    };
};
const StatusBoard = (props) => {
    const { state: { columns, data, selectedProcess }, actions: { setSelectedProcess }, } = useViewModel(props);
    return ((0, jsx_runtime_1.jsxs)("div", { className: StatusBoard_module_less_1.default.wrapper, children: [(0, jsx_runtime_1.jsx)(antd_1.Table, { columns: columns, dataSource: data, pagination: false, size: "small", tableLayout: "fixed", rowKey: "pid", bordered: false, onRow: (record) => ({
                    onClick: () => setSelectedProcess(record),
                }) }), (0, jsx_runtime_1.jsx)(BottomPanel_1.BottomPanel, { processInfo: selectedProcess, ipcRenderer: props.ipcRenderer, eventActionChannelName: props.eventActionChannelName }), (0, jsx_runtime_1.jsx)(Footer, { ipcRenderer: props.ipcRenderer, eventActionChannelName: constants_1.EVENT_ACTION_CHANNEL_NAME })] }));
};
exports.StatusBoard = StatusBoard;
exports.StatusBoard.defaultProps = {
    eventActionChannelName: constants_1.EVENT_ACTION_CHANNEL_NAME,
    eventDataChannelName: constants_1.EVENT_DATA_CHANNEL_NAME,
};
exports.default = exports.StatusBoard;
//# sourceMappingURL=StatusBoard.js.map