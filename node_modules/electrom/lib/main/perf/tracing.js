"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerfTracing = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const moment_1 = __importDefault(require("moment"));
const electron_1 = require("electron");
const debug = require('debug')('perf-tracing');
const BUFFER_SIZE = 1024 * 300;
const PARTITION_THRESHOLD = 10e3;
// https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/memory-infra/memory_infra_startup_tracing.md#the-advanced-way
// https://docs.google.com/document/d/1b5BSBEd1oB-3zj_CBAQWiQZ0cmI0HmjmXG-5iNveLqw
const includedCategories = [
    '*',
    'disabled-by-default-devtools.timeline',
    'disabled-by-default-devtools.timeline.frame',
    'disabled-by-default-v8.cpu_profiler',
    'disabled-by-default-v8.cpu_profiler.hires',
    'disabled-by-default-devtools.timeline.stack',
    'disabled-by-default-memory-infra',
    'partition_alloc',
];
const memoryDumpDefaultConfig = {
    triggers: [
        {
            mode: 'light',
            periodic_interval_ms: 50,
        },
        {
            mode: 'detailed',
            periodic_interval_ms: 1e3,
        },
    ],
};
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const dump = async ({ memoryDumpConfig: memory_dump_config, partitionThreshold, dumpTargetDir }) => {
    const dumpTargetDirFile = (0, path_1.join)(dumpTargetDir, `${(0, moment_1.default)().format('YYYY-MM-DD HH:mm:ss.SSS')}.json`);
    debug('recoding: %s', dumpTargetDirFile);
    await electron_1.contentTracing.startRecording({
        trace_buffer_size_in_kb: BUFFER_SIZE,
        included_categories: includedCategories,
        excluded_categories: [],
        memory_dump_config,
    });
    await sleep(partitionThreshold);
    debug('dumping: %s', dumpTargetDirFile);
    return electron_1.contentTracing.stopRecording(dumpTargetDirFile);
};
/**
 * @param {Object} options.memoryDumpConfig
 * @param {Object} options.dumpTargetDir
 */
const PerfTracing = async (options = {}) => {
    const partitionThreshold = options.partitionThreshold || PARTITION_THRESHOLD;
    const memoryDumpConfig = Object.assign(memoryDumpDefaultConfig, options.memoryDumpConfig || {});
    const dumpTargetDir = options.dumpTargetDir || process.cwd();
    await fs_1.promises.access(dumpTargetDir).catch(() => fs_1.promises.mkdir(dumpTargetDir));
    dump({
        dumpTargetDir,
        partitionThreshold,
        memoryDumpConfig,
    })
        .catch(debug)
        .finally(() => (0, exports.PerfTracing)(options));
};
exports.PerfTracing = PerfTracing;
//# sourceMappingURL=tracing.js.map